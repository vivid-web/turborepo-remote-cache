/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as GuestRouteRouteImport } from './routes/_guest/route'
import { Route as AuthenticatedRouteRouteImport } from './routes/_authenticated/route'
import { Route as GuestLoginRouteRouteImport } from './routes/_guest.login/route'
import { Route as AuthenticatedUsersRouteRouteImport } from './routes/_authenticated.users/route'
import { Route as AuthenticatedTeamsRouteRouteImport } from './routes/_authenticated.teams/route'
import { Route as AuthenticatedIndexRouteRouteImport } from './routes/_authenticated.index/route'
import { Route as AuthenticatedUsersUserIdRouteRouteImport } from './routes/_authenticated.users.$userId/route'
import { Route as AuthenticatedUsersIndexRouteRouteImport } from './routes/_authenticated.users.index/route'
import { Route as AuthenticatedTeamsIndexRouteRouteImport } from './routes/_authenticated.teams.index/route'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth/$'

const rootServerRouteImport = createServerRootRoute()

const GuestRouteRoute = GuestRouteRouteImport.update({
  id: '/_guest',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRouteRoute = AuthenticatedRouteRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const GuestLoginRouteRoute = GuestLoginRouteRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => GuestRouteRoute,
} as any)
const AuthenticatedUsersRouteRoute = AuthenticatedUsersRouteRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const AuthenticatedTeamsRouteRoute = AuthenticatedTeamsRouteRouteImport.update({
  id: '/teams',
  path: '/teams',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const AuthenticatedIndexRouteRoute = AuthenticatedIndexRouteRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const AuthenticatedUsersUserIdRouteRoute =
  AuthenticatedUsersUserIdRouteRouteImport.update({
    id: '/$userId',
    path: '/$userId',
    getParentRoute: () => AuthenticatedUsersRouteRoute,
  } as any)
const AuthenticatedUsersIndexRouteRoute =
  AuthenticatedUsersIndexRouteRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AuthenticatedUsersRouteRoute,
  } as any)
const AuthenticatedTeamsIndexRouteRoute =
  AuthenticatedTeamsIndexRouteRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AuthenticatedTeamsRouteRoute,
  } as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof AuthenticatedIndexRouteRoute
  '/teams': typeof AuthenticatedTeamsRouteRouteWithChildren
  '/users': typeof AuthenticatedUsersRouteRouteWithChildren
  '/login': typeof GuestLoginRouteRoute
  '/teams/': typeof AuthenticatedTeamsIndexRouteRoute
  '/users/': typeof AuthenticatedUsersIndexRouteRoute
  '/users/$userId': typeof AuthenticatedUsersUserIdRouteRoute
}
export interface FileRoutesByTo {
  '/': typeof AuthenticatedIndexRouteRoute
  '/login': typeof GuestLoginRouteRoute
  '/teams': typeof AuthenticatedTeamsIndexRouteRoute
  '/users': typeof AuthenticatedUsersIndexRouteRoute
  '/users/$userId': typeof AuthenticatedUsersUserIdRouteRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authenticated': typeof AuthenticatedRouteRouteWithChildren
  '/_guest': typeof GuestRouteRouteWithChildren
  '/_authenticated/': typeof AuthenticatedIndexRouteRoute
  '/_authenticated/teams': typeof AuthenticatedTeamsRouteRouteWithChildren
  '/_authenticated/users': typeof AuthenticatedUsersRouteRouteWithChildren
  '/_guest/login': typeof GuestLoginRouteRoute
  '/_authenticated/teams/': typeof AuthenticatedTeamsIndexRouteRoute
  '/_authenticated/users/': typeof AuthenticatedUsersIndexRouteRoute
  '/_authenticated/users/$userId': typeof AuthenticatedUsersUserIdRouteRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/teams'
    | '/users'
    | '/login'
    | '/teams/'
    | '/users/'
    | '/users/$userId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login' | '/teams' | '/users' | '/users/$userId'
  id:
    | '__root__'
    | '/_authenticated'
    | '/_guest'
    | '/_authenticated/'
    | '/_authenticated/teams'
    | '/_authenticated/users'
    | '/_guest/login'
    | '/_authenticated/teams/'
    | '/_authenticated/users/'
    | '/_authenticated/users/$userId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthenticatedRouteRoute: typeof AuthenticatedRouteRouteWithChildren
  GuestRouteRoute: typeof GuestRouteRouteWithChildren
}
export interface FileServerRoutesByFullPath {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/auth/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/auth/$'
  id: '__root__' | '/api/auth/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_guest': {
      id: '/_guest'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof GuestRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_guest/login': {
      id: '/_guest/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof GuestLoginRouteRouteImport
      parentRoute: typeof GuestRouteRoute
    }
    '/_authenticated/users': {
      id: '/_authenticated/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof AuthenticatedUsersRouteRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/teams': {
      id: '/_authenticated/teams'
      path: '/teams'
      fullPath: '/teams'
      preLoaderRoute: typeof AuthenticatedTeamsRouteRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/': {
      id: '/_authenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedIndexRouteRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/users/$userId': {
      id: '/_authenticated/users/$userId'
      path: '/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof AuthenticatedUsersUserIdRouteRouteImport
      parentRoute: typeof AuthenticatedUsersRouteRoute
    }
    '/_authenticated/users/': {
      id: '/_authenticated/users/'
      path: '/'
      fullPath: '/users/'
      preLoaderRoute: typeof AuthenticatedUsersIndexRouteRouteImport
      parentRoute: typeof AuthenticatedUsersRouteRoute
    }
    '/_authenticated/teams/': {
      id: '/_authenticated/teams/'
      path: '/'
      fullPath: '/teams/'
      preLoaderRoute: typeof AuthenticatedTeamsIndexRouteRouteImport
      parentRoute: typeof AuthenticatedTeamsRouteRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface AuthenticatedTeamsRouteRouteChildren {
  AuthenticatedTeamsIndexRouteRoute: typeof AuthenticatedTeamsIndexRouteRoute
}

const AuthenticatedTeamsRouteRouteChildren: AuthenticatedTeamsRouteRouteChildren =
  {
    AuthenticatedTeamsIndexRouteRoute: AuthenticatedTeamsIndexRouteRoute,
  }

const AuthenticatedTeamsRouteRouteWithChildren =
  AuthenticatedTeamsRouteRoute._addFileChildren(
    AuthenticatedTeamsRouteRouteChildren,
  )

interface AuthenticatedUsersRouteRouteChildren {
  AuthenticatedUsersIndexRouteRoute: typeof AuthenticatedUsersIndexRouteRoute
  AuthenticatedUsersUserIdRouteRoute: typeof AuthenticatedUsersUserIdRouteRoute
}

const AuthenticatedUsersRouteRouteChildren: AuthenticatedUsersRouteRouteChildren =
  {
    AuthenticatedUsersIndexRouteRoute: AuthenticatedUsersIndexRouteRoute,
    AuthenticatedUsersUserIdRouteRoute: AuthenticatedUsersUserIdRouteRoute,
  }

const AuthenticatedUsersRouteRouteWithChildren =
  AuthenticatedUsersRouteRoute._addFileChildren(
    AuthenticatedUsersRouteRouteChildren,
  )

interface AuthenticatedRouteRouteChildren {
  AuthenticatedIndexRouteRoute: typeof AuthenticatedIndexRouteRoute
  AuthenticatedTeamsRouteRoute: typeof AuthenticatedTeamsRouteRouteWithChildren
  AuthenticatedUsersRouteRoute: typeof AuthenticatedUsersRouteRouteWithChildren
}

const AuthenticatedRouteRouteChildren: AuthenticatedRouteRouteChildren = {
  AuthenticatedIndexRouteRoute: AuthenticatedIndexRouteRoute,
  AuthenticatedTeamsRouteRoute: AuthenticatedTeamsRouteRouteWithChildren,
  AuthenticatedUsersRouteRoute: AuthenticatedUsersRouteRouteWithChildren,
}

const AuthenticatedRouteRouteWithChildren =
  AuthenticatedRouteRoute._addFileChildren(AuthenticatedRouteRouteChildren)

interface GuestRouteRouteChildren {
  GuestLoginRouteRoute: typeof GuestLoginRouteRoute
}

const GuestRouteRouteChildren: GuestRouteRouteChildren = {
  GuestLoginRouteRoute: GuestLoginRouteRoute,
}

const GuestRouteRouteWithChildren = GuestRouteRoute._addFileChildren(
  GuestRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRouteRoute: AuthenticatedRouteRouteWithChildren,
  GuestRouteRoute: GuestRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()

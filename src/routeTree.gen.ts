/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as GuestRouteImport } from './routes/_guest'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as AuthenticatedIndexRouteImport } from './routes/_authenticated.index'
import { Route as GuestLoginRouteImport } from './routes/_guest.login'
import { Route as AuthenticatedUsersRouteImport } from './routes/_authenticated.users'
import { Route as AuthenticatedTeamsRouteImport } from './routes/_authenticated.teams'
import { Route as AuthenticatedUsersIndexRouteImport } from './routes/_authenticated.users.index'
import { Route as AuthenticatedTeamsIndexRouteImport } from './routes/_authenticated.teams.index'
import { Route as AuthenticatedUsersUserIdRouteImport } from './routes/_authenticated.users.$userId'
import { Route as AuthenticatedTeamsTeamIdRouteImport } from './routes/_authenticated.teams.$teamId'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api.auth.$'

const rootServerRouteImport = createServerRootRoute()

const GuestRoute = GuestRouteImport.update({
  id: '/_guest',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedIndexRoute = AuthenticatedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const GuestLoginRoute = GuestLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => GuestRoute,
} as any)
const AuthenticatedUsersRoute = AuthenticatedUsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedTeamsRoute = AuthenticatedTeamsRouteImport.update({
  id: '/teams',
  path: '/teams',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedUsersIndexRoute = AuthenticatedUsersIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedUsersRoute,
} as any)
const AuthenticatedTeamsIndexRoute = AuthenticatedTeamsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedTeamsRoute,
} as any)
const AuthenticatedUsersUserIdRoute =
  AuthenticatedUsersUserIdRouteImport.update({
    id: '/$userId',
    path: '/$userId',
    getParentRoute: () => AuthenticatedUsersRoute,
  } as any)
const AuthenticatedTeamsTeamIdRoute =
  AuthenticatedTeamsTeamIdRouteImport.update({
    id: '/$teamId',
    path: '/$teamId',
    getParentRoute: () => AuthenticatedTeamsRoute,
  } as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/teams': typeof AuthenticatedTeamsRouteWithChildren
  '/users': typeof AuthenticatedUsersRouteWithChildren
  '/login': typeof GuestLoginRoute
  '/': typeof AuthenticatedIndexRoute
  '/teams/$teamId': typeof AuthenticatedTeamsTeamIdRoute
  '/users/$userId': typeof AuthenticatedUsersUserIdRoute
  '/teams/': typeof AuthenticatedTeamsIndexRoute
  '/users/': typeof AuthenticatedUsersIndexRoute
}
export interface FileRoutesByTo {
  '/login': typeof GuestLoginRoute
  '/': typeof AuthenticatedIndexRoute
  '/teams/$teamId': typeof AuthenticatedTeamsTeamIdRoute
  '/users/$userId': typeof AuthenticatedUsersUserIdRoute
  '/teams': typeof AuthenticatedTeamsIndexRoute
  '/users': typeof AuthenticatedUsersIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/_guest': typeof GuestRouteWithChildren
  '/_authenticated/teams': typeof AuthenticatedTeamsRouteWithChildren
  '/_authenticated/users': typeof AuthenticatedUsersRouteWithChildren
  '/_guest/login': typeof GuestLoginRoute
  '/_authenticated/': typeof AuthenticatedIndexRoute
  '/_authenticated/teams/$teamId': typeof AuthenticatedTeamsTeamIdRoute
  '/_authenticated/users/$userId': typeof AuthenticatedUsersUserIdRoute
  '/_authenticated/teams/': typeof AuthenticatedTeamsIndexRoute
  '/_authenticated/users/': typeof AuthenticatedUsersIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/teams'
    | '/users'
    | '/login'
    | '/'
    | '/teams/$teamId'
    | '/users/$userId'
    | '/teams/'
    | '/users/'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/' | '/teams/$teamId' | '/users/$userId' | '/teams' | '/users'
  id:
    | '__root__'
    | '/_authenticated'
    | '/_guest'
    | '/_authenticated/teams'
    | '/_authenticated/users'
    | '/_guest/login'
    | '/_authenticated/'
    | '/_authenticated/teams/$teamId'
    | '/_authenticated/users/$userId'
    | '/_authenticated/teams/'
    | '/_authenticated/users/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  GuestRoute: typeof GuestRouteWithChildren
}
export interface FileServerRoutesByFullPath {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/auth/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/auth/$'
  id: '__root__' | '/api/auth/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_guest': {
      id: '/_guest'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof GuestRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/': {
      id: '/_authenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedIndexRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_guest/login': {
      id: '/_guest/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof GuestLoginRouteImport
      parentRoute: typeof GuestRoute
    }
    '/_authenticated/users': {
      id: '/_authenticated/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof AuthenticatedUsersRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/teams': {
      id: '/_authenticated/teams'
      path: '/teams'
      fullPath: '/teams'
      preLoaderRoute: typeof AuthenticatedTeamsRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/users/': {
      id: '/_authenticated/users/'
      path: '/'
      fullPath: '/users/'
      preLoaderRoute: typeof AuthenticatedUsersIndexRouteImport
      parentRoute: typeof AuthenticatedUsersRoute
    }
    '/_authenticated/teams/': {
      id: '/_authenticated/teams/'
      path: '/'
      fullPath: '/teams/'
      preLoaderRoute: typeof AuthenticatedTeamsIndexRouteImport
      parentRoute: typeof AuthenticatedTeamsRoute
    }
    '/_authenticated/users/$userId': {
      id: '/_authenticated/users/$userId'
      path: '/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof AuthenticatedUsersUserIdRouteImport
      parentRoute: typeof AuthenticatedUsersRoute
    }
    '/_authenticated/teams/$teamId': {
      id: '/_authenticated/teams/$teamId'
      path: '/$teamId'
      fullPath: '/teams/$teamId'
      preLoaderRoute: typeof AuthenticatedTeamsTeamIdRouteImport
      parentRoute: typeof AuthenticatedTeamsRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface AuthenticatedTeamsRouteChildren {
  AuthenticatedTeamsTeamIdRoute: typeof AuthenticatedTeamsTeamIdRoute
  AuthenticatedTeamsIndexRoute: typeof AuthenticatedTeamsIndexRoute
}

const AuthenticatedTeamsRouteChildren: AuthenticatedTeamsRouteChildren = {
  AuthenticatedTeamsTeamIdRoute: AuthenticatedTeamsTeamIdRoute,
  AuthenticatedTeamsIndexRoute: AuthenticatedTeamsIndexRoute,
}

const AuthenticatedTeamsRouteWithChildren =
  AuthenticatedTeamsRoute._addFileChildren(AuthenticatedTeamsRouteChildren)

interface AuthenticatedUsersRouteChildren {
  AuthenticatedUsersUserIdRoute: typeof AuthenticatedUsersUserIdRoute
  AuthenticatedUsersIndexRoute: typeof AuthenticatedUsersIndexRoute
}

const AuthenticatedUsersRouteChildren: AuthenticatedUsersRouteChildren = {
  AuthenticatedUsersUserIdRoute: AuthenticatedUsersUserIdRoute,
  AuthenticatedUsersIndexRoute: AuthenticatedUsersIndexRoute,
}

const AuthenticatedUsersRouteWithChildren =
  AuthenticatedUsersRoute._addFileChildren(AuthenticatedUsersRouteChildren)

interface AuthenticatedRouteChildren {
  AuthenticatedTeamsRoute: typeof AuthenticatedTeamsRouteWithChildren
  AuthenticatedUsersRoute: typeof AuthenticatedUsersRouteWithChildren
  AuthenticatedIndexRoute: typeof AuthenticatedIndexRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedTeamsRoute: AuthenticatedTeamsRouteWithChildren,
  AuthenticatedUsersRoute: AuthenticatedUsersRouteWithChildren,
  AuthenticatedIndexRoute: AuthenticatedIndexRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

interface GuestRouteChildren {
  GuestLoginRoute: typeof GuestLoginRoute
}

const GuestRouteChildren: GuestRouteChildren = {
  GuestLoginRoute: GuestLoginRoute,
}

const GuestRouteWithChildren = GuestRoute._addFileChildren(GuestRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  GuestRoute: GuestRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
